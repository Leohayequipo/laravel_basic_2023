//laravel new proyecto


/*Artisan es propio de laravel y nos permite a traves de comando, crear cosas (archivos bases)*/
/*Necesitas tener instalado*/
php
laravel
composer
node
bd

/*arrancar el server*/
composer install
php artisan serve

/*no puede faltar el .env*/
//despues key generate


//con artisan creo componentes 
ej:
php artisan make:controller --help
php artisan make:controller --help


/*primero las rutas*/

En las rutas creo los array que voy a mandar en un vista
En la vista recibo los datos y los muestro -usa blade-

/*crear template en la vista para reutilizar codigo*/
html
y directiva @yield('content')

Bien que esta pasando aca!
en el archivo template uso el @yield('contenido')
para indicar que ahi se puede colocar algo desde otro lado
// y desde los archivos que invocan template

si queremos meter algo en el @yield('content'). Le decimos 
 usa       @extends('template')
 
 y em content mete esto
    @section('content')
    <h1>Home</h1>
    @endsection

//bien ahora si harcodeamos la url

http://127.0.0.1:8000/
http://127.0.0.1:8000/blog/
http://127.0.0.1:8000/blog/psdasda

//ahora en necesario agregar un nombre a las rutas
Route::get('/', function () {
    return view('home');
})->name('home');
agregue el name

/*pasar info con el nombre*/
en el archivo blog
ruta mas parametro
  <a href="{{route('post'.$post['slug'])}}">
  de esta manera armo la url

/**como crear un controlador por consola**/
php artisan make:controller PageController


//dentro del controlador podemos ver el namespace 
namespace App\Http\Controllers;
para trabajar con las rutas es necesario usar ese namespace en las rutas
quedando asi. Fijate que pusimos en nombre del controlador 
/******/
use App\Http\Controllers\PageController;
/*******/
Sacamos la logica de la ruta y la metemos en el controlador PageController
el manejo de peticiones se hace desde un controlador


//bases de datos
    control de versiones de bases de datos
    Se maneja desde migracion no desde la base de datos

    php artisan migrate

    //para crear una tabla
    php artisan make:migration  create_posts_table

    Em esa tabla creada agrego la sintaxis para darle forma a los campos

    up crea version
    down baja version
//crando el modelo
    //creo el modelo, factory y elphp artisan make:model Post -fc controlador
    php artisan make:model Post -fc    
    despues en la carpeta database-factories
    creo los fakers
      public function definition(): array
    {
        return [
            'title'=>$this->faker->sentence(),
            'slug'=>$this->faker->sentence(),
            'body'=>$this->faker->text(2200),

        ];
    }

    y en seeders activo la Semilla

        public function run(): void
    {
         \App\Models\User::factory(10)->create();
         \App\Models\Post::factory(80)->create();


    php artisan migrate:refresh --seed

    En el factori podemos agregar class para tener mas funcionalidades como por ejemplo
    STR
    en onde toma un texto y los trasforma en slug
    use illuminate\Support\Str;
      'title'=>$title= $this->faker->sentence(),
            'slug'=>Str::slug($title),

//eloquent (sintaxis para manejar bd) tecnologia ORM
    Desde el controlador uso el namespace de el modelo

    use \App\Models\Post;

    en el controlador le figo traeme los post
            $post = Post::get();

ost::get();-> Trae todos los registros de la base de datos
Post::frist();-> Trae el primer registro de la base de datos
Post::find(id); -> Busca un registro en la base de datos por medio de su id
Post::latest(); -> Trae todos los registros de la base de datos, y los ordena de forma descendente

adicional, podemos utilizar el método paginate(), para realizar la paginación, solo no nos debemos de incluir en nuestras vistas la propiedad links() para que podamos visualizar los controles de paginación            


actualizar php artisan migrate:refresh --seed

//llamar a un campo de digamos un inner join
primero en el modelo necesito indicar la relacion
class Post extends Model
{
    use HasFactory;
    public function user(){
        return $this->belongsTo(User::class);
    }
}


en la vista queda asi
  {{$post->user->name}}
            
//////inicio de session brezz

instalar 
composer require laravel/breeze --dev
                                //--dev porque se usa solo en el area de desarrollo
                                

